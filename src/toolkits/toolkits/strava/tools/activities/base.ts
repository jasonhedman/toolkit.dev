import { z } from "zod";
import { createBaseTool } from "@/toolkits/create-tool";

export const getAthleteActivitiesTool = createBaseTool({
  description:
    "Get a list of activities for the authenticated athlete. Returns activities in reverse chronological order.",
  inputSchema: z.object({
    page: z.number().optional().describe("Page number for pagination, default is 1"),
    per_page: z.number().optional().describe("Number of activities per page, default is 30, max is 200"),
    before: z.number().optional().describe("Unix timestamp to return activities before this date"),
    after: z.number().optional().describe("Unix timestamp to return activities after this date"),
  }),
  outputSchema: z.object({
    activities: z.array(
      z.object({
        id: z.number(),
        name: z.string(),
        type: z.string(),
        start_date: z.string(),
        start_date_local: z.string(),
        timezone: z.string(),
        distance: z.number(),
        moving_time: z.number(),
        elapsed_time: z.number(),
        total_elevation_gain: z.number(),
        average_speed: z.number(),
        max_speed: z.number(),
        average_cadence: z.number().nullable(),
        average_heartrate: z.number().nullable(),
        max_heartrate: z.number().nullable(),
        elev_high: z.number().nullable(),
        elev_low: z.number().nullable(),
        achievement_count: z.number(),
        kudos_count: z.number(),
        comment_count: z.number(),
        athlete_count: z.number(),
        photo_count: z.number(),
        map: z.object({
          id: z.string(),
          summary_polyline: z.string().nullable(),
          resource_state: z.number(),
        }).nullable(),
        trainer: z.boolean(),
        commute: z.boolean(),
        manual: z.boolean(),
        private: z.boolean(),
        visibility: z.string(),
        flagged: z.boolean(),
        workout_type: z.number().nullable(),
        upload_id: z.number().nullable(),
        external_id: z.string().nullable(),
        from_accepted_tag: z.boolean(),
        pr_count: z.number(),
        total_photo_count: z.number(),
        has_kudoed: z.boolean(),
      })
    ),
  }),
});

export const getActivityDetailsTool = createBaseTool({
  description:
    "Get detailed information about a specific activity including segments, laps, and full statistics",
  inputSchema: z.object({
    id: z.number().describe("The activity ID"),
    include_all_efforts: z.boolean().optional().describe("Include all segment efforts, default is false"),
  }),
  outputSchema: z.object({
    id: z.number(),
    name: z.string(),
    description: z.string().nullable(),
    type: z.string(),
    start_date: z.string(),
    start_date_local: z.string(),
    timezone: z.string(),
    distance: z.number(),
    moving_time: z.number(),
    elapsed_time: z.number(),
    total_elevation_gain: z.number(),
    average_speed: z.number(),
    max_speed: z.number(),
    average_cadence: z.number().nullable(),
    average_heartrate: z.number().nullable(),
    max_heartrate: z.number().nullable(),
    elev_high: z.number().nullable(),
    elev_low: z.number().nullable(),
    calories: z.number().nullable(),
    device_name: z.string().nullable(),
    embed_token: z.string().nullable(),
    achievement_count: z.number(),
    kudos_count: z.number(),
    comment_count: z.number(),
    athlete_count: z.number(),
    photo_count: z.number(),
    map: z.object({
      id: z.string(),
      polyline: z.string().nullable(),
      summary_polyline: z.string().nullable(),
      resource_state: z.number(),
    }).nullable(),
    trainer: z.boolean(),
    commute: z.boolean(),
    manual: z.boolean(),
    private: z.boolean(),
    visibility: z.string(),
    flagged: z.boolean(),
    workout_type: z.number().nullable(),
    upload_id: z.number().nullable(),
    external_id: z.string().nullable(),
    from_accepted_tag: z.boolean(),
    pr_count: z.number(),
    total_photo_count: z.number(),
    has_kudoed: z.boolean(),
    suffer_score: z.number().nullable(),
    segment_efforts: z.array(
      z.object({
        id: z.number(),
        name: z.string(),
        elapsed_time: z.number(),
        moving_time: z.number(),
        start_date: z.string(),
        start_date_local: z.string(),
        distance: z.number(),
        start_index: z.number(),
        end_index: z.number(),
        average_cadence: z.number().nullable(),
        device_watts: z.boolean(),
        average_heartrate: z.number().nullable(),
        max_heartrate: z.number().nullable(),
        segment: z.object({
          id: z.number(),
          name: z.string(),
          activity_type: z.string(),
          distance: z.number(),
          average_grade: z.number(),
          maximum_grade: z.number(),
          elevation_high: z.number(),
          elevation_low: z.number(),
          start_latlng: z.array(z.number()).nullable(),
          end_latlng: z.array(z.number()).nullable(),
          elevation_profile: z.string().nullable(),
          climb_category: z.number(),
          city: z.string().nullable(),
          state: z.string().nullable(),
          country: z.string().nullable(),
          private: z.boolean(),
          hazardous: z.boolean(),
        }),
        kom_rank: z.number().nullable(),
        pr_rank: z.number().nullable(),
        achievements: z.array(z.object({
          type_id: z.number(),
          type: z.string(),
          rank: z.number(),
        })),
        hidden: z.boolean(),
      })
    ).optional(),
  }),
}); 